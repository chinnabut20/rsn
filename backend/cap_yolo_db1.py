#python3 cap_yolo_db1.py
import os
import time
import threading
import subprocess
from datetime import datetime, timedelta, timezone
from collections import defaultdict
import imagehash
from PIL import Image
import filecmp
from url1 import urls
from ultralytics import YOLO
import psycopg2  
import shutil
import cv2 

yolo_model = YOLO("best.pt")  

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DB
DB_HOST = "postgis"
DB_PORT = "5432"
DB_NAME = "traffic_pollution_db"
DB_USER = "postgres"
DB_PASS = "1234"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏õ
CAPTURE_INTERVAL_SEC = 60
NUM_CAPTURES = 60
CAPTURE_TIMES = [(8, 0), (12, 0), (17, 0)]
bangkok_tz = timezone(timedelta(hours=7))



# === ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û 1 ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ OpenCV
def capture_image_opencv(output_path, url):
    cap = cv2.VideoCapture(url)
    if not cap.isOpened():
        # print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î stream ‡πÑ‡∏î‡πâ: {url}")
        return False

    ret, frame = cap.read()
    cap.release()

    if ret and frame is not None:
        try:
            cv2.imwrite(output_path, frame)
            return True
        except Exception as e:
            # print(f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return False
    else:
        # print(f"‚ö†Ô∏è ‡∏î‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {url}")
        return False


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB
def get_connection():
    return psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASS
    )


# === Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• YOLO result ‡∏•‡∏á DB
def insert_to_db(data):
    try:
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO api.traffic_data
            (date, time, station_id, imagecount, bus, car, motorcycle, truck, van, total_vehicles, province)
            VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
        """, (
            data["date"], data["time"], data["station_id"], data["image_count"],
            data["bus"], data["car"], data["motorcycle"],
            data["truck"], data["van"], data["total_vehicles"], data["province"]
        ))
        conn.commit()
        cur.close()
        conn.close()
        # print(f"‚úÖ Inserted to DB: {data['station_id']} {data['date']} {data['time']}")
    except Exception as e:
        print(f"‚ùå Failed to insert DB: {e}")


# === ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
def run_camera_capture(province, cam_key, url, folder_name):
    start_time = datetime.now(bangkok_tz).replace(second=0, microsecond=0)

    for i in range(NUM_CAPTURES):
        target_time = start_time + timedelta(minutes=i)
        while datetime.now(bangkok_tz) < target_time:
            time.sleep(1)

        timestamp = target_time.strftime("%Y%m%d_%H%M%S")
        save_dir = os.path.join(folder_name, province, cam_key)
        os.makedirs(save_dir, exist_ok=True)
        output_path = os.path.join(save_dir, f"{cam_key}_{timestamp}.jpg")

        retry_deadline = target_time + timedelta(seconds=30)
        while datetime.now(bangkok_tz) < retry_deadline:
            if capture_image_opencv(output_path, url):
                break

            time.sleep(2)

# === ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
# def cleanup_duplicate_and_bad_images(root_folder):
#     hash_dict = defaultdict(list)

#     for dirpath, _, filenames in os.walk(root_folder):
#         for filename in filenames:
#             if filename.lower().endswith((".jpg", ".png", ".jpeg", ".bmp")):
#                 file_path = os.path.join(dirpath, filename)
#                 try:
#                     with Image.open(file_path) as img:
#                         img_hash = imagehash.average_hash(img)
#                         hash_dict[str(img_hash)].append(file_path)
#                 except Exception:
#                     try:
#                         os.remove(file_path)
#                     except:
#                         pass

#     for paths in hash_dict.values():
#         if len(paths) > 1:
#             for i in range(1, len(paths)):  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
#                 try:
#                     os.remove(paths[i])
#                 except:
#                     pass

def run_yolo_on_folder(folder_path, station_id, province, capture_time_str):
    counts = {"bus":0, "car":0, "motorcycle":0, "truck":0, "van":0}
    image_count = 0

    for file in os.listdir(folder_path):
        if file.lower().endswith((".jpg", ".png", ".jpeg", ".bmp")):
            image_count += 1
            img_path = os.path.join(folder_path, file)
            results = yolo_model(img_path, verbose=False)

            for r in results:
                for cls in r.boxes.cls:
                    cls_name = yolo_model.names[int(cls)]
                    if cls_name in counts:
                        counts[cls_name] += 1
    
    total = sum(counts.values())
    return {
        "date": datetime.now().strftime("%Y-%m-%d"),
        "time": capture_time_str,   # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
        "station_id": station_id,
        "province": province,
        "image_count": image_count,
        "bus": counts["bus"],
        "car": counts["car"],
        "motorcycle": counts["motorcycle"],
        "truck": counts["truck"],
        "van": counts["van"],
        "total_vehicles": total
    }


# === helper: ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô base ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏•‡∏ö -IN / -OUT)
def base_camera_name(cam: str):
    return cam.replace("-IN", "").replace("-OUT", "")


# === ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á base ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
def merge_camera_results(results_all):
    merged = {}
    for res in results_all:
        base_cam = base_camera_name(res["station_id"])
        key = (res["date"], res["time"], base_cam, res["province"])
        if key not in merged:
            merged[key] = res.copy()
            merged[key]["station_id"] = base_cam
        else:
            merged[key]["image_count"] += res["image_count"]
            merged[key]["bus"] += res["bus"]
            merged[key]["car"] += res["car"]
            merged[key]["motorcycle"] += res["motorcycle"]
            merged[key]["truck"] += res["truck"]
            merged[key]["van"] += res["van"]
            merged[key]["total_vehicles"] += res["total_vehicles"]
    return list(merged.values())


# === ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
def main_capture(hour, minute):
    folder_name = datetime.now(bangkok_tz).replace(
        hour=hour, minute=minute, second=0, microsecond=0
    ).strftime("%Y-%m-%d %H-%M-%S") + "G1"

    threads = []
    for province, cams in urls.items():
        for cam_key, url in cams.items():
            thread = threading.Thread(
                target=run_camera_capture,
                args=(province, cam_key, url, folder_name)
            )
            thread.start()
            threads.append(thread)

    for thread in threads:
        thread.join()

    # cleanup_duplicate_and_bad_images(folder_name)

    # === YOLO + insert DB ===
    capture_time_str = f"{hour:02d}:{minute:02d}:00" 

    results_all = []
    for province, cams in urls.items():
        for cam_key in cams:
            cam_dir = os.path.join(folder_name, province, cam_key)
            if os.path.isdir(cam_dir):
                base_cam = base_camera_name(cam_key)
                # ‚úÖ ‡∏™‡πà‡∏á capture_time_str ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                result = run_yolo_on_folder(cam_dir, base_cam, province, capture_time_str)
                results_all.append(result)


    # üîπ ‡∏£‡∏ß‡∏°‡∏ú‡∏• IN/OUT
    merged_results = merge_camera_results(results_all)

    for result in merged_results:
        insert_to_db(result)
        print(f"YOLO Done + DB: {result}")
    
    # === ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à ===
    try:
        shutil.rmtree(folder_name)
        print(f"üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {folder_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {folder_name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    return merged_results


# === Scheduler
# if __name__ == "__main__":
#     for hour, minute in CAPTURE_TIMES:
#         now = datetime.now(bangkok_tz)
#         start_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)

#         if now > start_time:
#             continue

#         wait_sec = (start_time - now).total_seconds()
#         time.sleep(wait_sec)

#         main_capture(hour, minute)

# === Scheduler
if __name__ == "__main__":
    for hour, minute in CAPTURE_TIMES:
        now = datetime.now(bangkok_tz)
        start_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)

        if now > start_time:
            print(f"‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≠‡∏ö {hour:02d}:{minute:02d} (‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß)")
            continue

        wait_sec = (start_time - now).total_seconds()
        print(f"‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ {start_time.strftime('%Y-%m-%d %H:%M:%S')} "
              f"(‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {int(wait_sec)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        time.sleep(wait_sec)

        print(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û + YOLO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö {hour:02d}:{minute:02d}\n")
        main_capture(hour, minute)
        print(f"\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û + YOLO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö {hour:02d}:{minute:02d}\n")
